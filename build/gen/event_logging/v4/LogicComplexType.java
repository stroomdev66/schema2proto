// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/logic_complex_type.proto
// Protobuf Java Version: 4.26.1

package event_logging.v4;

public final class LogicComplexType {
  private LogicComplexType() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      LogicComplexType.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AndComplexTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.AndComplexType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType> 
        getChoiceWrapperList();
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType getChoiceWrapper(int index);
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    int getChoiceWrapperCount();
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder> 
        getChoiceWrapperOrBuilderList();
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder getChoiceWrapperOrBuilder(
        int index);
  }
  /**
   * <pre>
   * All of the enclosed items are to be treated as being AND together.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.AndComplexType}
   */
  public static final class AndComplexType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.AndComplexType)
      AndComplexTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        AndComplexType.class.getName());
    }
    // Use AndComplexType.newBuilder() to construct.
    private AndComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private AndComplexType() {
      choiceWrapper_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              event_logging.v4.LogicComplexType.AndComplexType.class, event_logging.v4.LogicComplexType.AndComplexType.Builder.class);
    }

    public interface ChoiceWrapper_AndComplexTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return Whether the term field is set.
       */
      boolean hasTerm();
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return The term.
       */
      event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm();
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       */
      event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder();

      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return Whether the and field is set.
       */
      boolean hasAnd();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return The and.
       */
      event_logging.v4.LogicComplexType.AndComplexType getAnd();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       */
      event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder();

      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return Whether the or field is set.
       */
      boolean hasOr();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return The or.
       */
      event_logging.v4.LogicComplexType.OrComplexType getOr();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       */
      event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder();

      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return Whether the not field is set.
       */
      boolean hasNot();
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return The not.
       */
      event_logging.v4.LogicComplexType.NotComplexType getNot();
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       */
      event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder();
    }
    /**
     * Protobuf type {@code event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType}
     */
    public static final class ChoiceWrapper_AndComplexType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType)
        ChoiceWrapper_AndComplexTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          ChoiceWrapper_AndComplexType.class.getName());
      }
      // Use ChoiceWrapper_AndComplexType.newBuilder() to construct.
      private ChoiceWrapper_AndComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private ChoiceWrapper_AndComplexType() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.class, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder.class);
      }

      private int bitField0_;
      public static final int TERM_FIELD_NUMBER = 1;
      private event_logging.v4.TermComplexTypeOuterClass.TermComplexType term_;
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return Whether the term field is set.
       */
      @java.lang.Override
      public boolean hasTerm() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return The term.
       */
      @java.lang.Override
      public event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm() {
        return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       */
      @java.lang.Override
      public event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder() {
        return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
      }

      public static final int AND_FIELD_NUMBER = 2;
      private event_logging.v4.LogicComplexType.AndComplexType and_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return Whether the and field is set.
       */
      @java.lang.Override
      public boolean hasAnd() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return The and.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexType getAnd() {
        return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder() {
        return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
      }

      public static final int OR_FIELD_NUMBER = 3;
      private event_logging.v4.LogicComplexType.OrComplexType or_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return Whether the or field is set.
       */
      @java.lang.Override
      public boolean hasOr() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return The or.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexType getOr() {
        return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder() {
        return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
      }

      public static final int NOT_FIELD_NUMBER = 4;
      private event_logging.v4.LogicComplexType.NotComplexType not_;
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return Whether the not field is set.
       */
      @java.lang.Override
      public boolean hasNot() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return The not.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexType getNot() {
        return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder() {
        return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getTerm());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getAnd());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeMessage(3, getOr());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeMessage(4, getNot());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getTerm());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getAnd());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getOr());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getNot());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType)) {
          return super.equals(obj);
        }
        event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType other = (event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType) obj;

        if (hasTerm() != other.hasTerm()) return false;
        if (hasTerm()) {
          if (!getTerm()
              .equals(other.getTerm())) return false;
        }
        if (hasAnd() != other.hasAnd()) return false;
        if (hasAnd()) {
          if (!getAnd()
              .equals(other.getAnd())) return false;
        }
        if (hasOr() != other.hasOr()) return false;
        if (hasOr()) {
          if (!getOr()
              .equals(other.getOr())) return false;
        }
        if (hasNot() != other.hasNot()) return false;
        if (hasNot()) {
          if (!getNot()
              .equals(other.getNot())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTerm()) {
          hash = (37 * hash) + TERM_FIELD_NUMBER;
          hash = (53 * hash) + getTerm().hashCode();
        }
        if (hasAnd()) {
          hash = (37 * hash) + AND_FIELD_NUMBER;
          hash = (53 * hash) + getAnd().hashCode();
        }
        if (hasOr()) {
          hash = (37 * hash) + OR_FIELD_NUMBER;
          hash = (53 * hash) + getOr().hashCode();
        }
        if (hasNot()) {
          hash = (37 * hash) + NOT_FIELD_NUMBER;
          hash = (53 * hash) + getNot().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType)
          event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.class, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder.class);
        }

        // Construct using event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getTermFieldBuilder();
            getAndFieldBuilder();
            getOrFieldBuilder();
            getNotFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          term_ = null;
          if (termBuilder_ != null) {
            termBuilder_.dispose();
            termBuilder_ = null;
          }
          and_ = null;
          if (andBuilder_ != null) {
            andBuilder_.dispose();
            andBuilder_ = null;
          }
          or_ = null;
          if (orBuilder_ != null) {
            orBuilder_.dispose();
            orBuilder_ = null;
          }
          not_ = null;
          if (notBuilder_ != null) {
            notBuilder_.dispose();
            notBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_descriptor;
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType getDefaultInstanceForType() {
          return event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.getDefaultInstance();
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType build() {
          event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType buildPartial() {
          event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType result = new event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.term_ = termBuilder_ == null
                ? term_
                : termBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.and_ = andBuilder_ == null
                ? and_
                : andBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.or_ = orBuilder_ == null
                ? or_
                : orBuilder_.build();
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.not_ = notBuilder_ == null
                ? not_
                : notBuilder_.build();
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType) {
            return mergeFrom((event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType other) {
          if (other == event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.getDefaultInstance()) return this;
          if (other.hasTerm()) {
            mergeTerm(other.getTerm());
          }
          if (other.hasAnd()) {
            mergeAnd(other.getAnd());
          }
          if (other.hasOr()) {
            mergeOr(other.getOr());
          }
          if (other.hasNot()) {
            mergeNot(other.getNot());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getTermFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  input.readMessage(
                      getAndFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getOrFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                case 34: {
                  input.readMessage(
                      getNotFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000008;
                  break;
                } // case 34
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private event_logging.v4.TermComplexTypeOuterClass.TermComplexType term_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder> termBuilder_;
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         * @return Whether the term field is set.
         */
        public boolean hasTerm() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         * @return The term.
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm() {
          if (termBuilder_ == null) {
            return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
          } else {
            return termBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder setTerm(event_logging.v4.TermComplexTypeOuterClass.TermComplexType value) {
          if (termBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            term_ = value;
          } else {
            termBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder setTerm(
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder builderForValue) {
          if (termBuilder_ == null) {
            term_ = builderForValue.build();
          } else {
            termBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder mergeTerm(event_logging.v4.TermComplexTypeOuterClass.TermComplexType value) {
          if (termBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              term_ != null &&
              term_ != event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance()) {
              getTermBuilder().mergeFrom(value);
            } else {
              term_ = value;
            }
          } else {
            termBuilder_.mergeFrom(value);
          }
          if (term_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder clearTerm() {
          bitField0_ = (bitField0_ & ~0x00000001);
          term_ = null;
          if (termBuilder_ != null) {
            termBuilder_.dispose();
            termBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder getTermBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getTermFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder() {
          if (termBuilder_ != null) {
            return termBuilder_.getMessageOrBuilder();
          } else {
            return term_ == null ?
                event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
          }
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder> 
            getTermFieldBuilder() {
          if (termBuilder_ == null) {
            termBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder>(
                    getTerm(),
                    getParentForChildren(),
                    isClean());
            term_ = null;
          }
          return termBuilder_;
        }

        private event_logging.v4.LogicComplexType.AndComplexType and_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder> andBuilder_;
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         * @return Whether the and field is set.
         */
        public boolean hasAnd() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         * @return The and.
         */
        public event_logging.v4.LogicComplexType.AndComplexType getAnd() {
          if (andBuilder_ == null) {
            return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
          } else {
            return andBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder setAnd(event_logging.v4.LogicComplexType.AndComplexType value) {
          if (andBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            and_ = value;
          } else {
            andBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder setAnd(
            event_logging.v4.LogicComplexType.AndComplexType.Builder builderForValue) {
          if (andBuilder_ == null) {
            and_ = builderForValue.build();
          } else {
            andBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder mergeAnd(event_logging.v4.LogicComplexType.AndComplexType value) {
          if (andBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              and_ != null &&
              and_ != event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance()) {
              getAndBuilder().mergeFrom(value);
            } else {
              and_ = value;
            }
          } else {
            andBuilder_.mergeFrom(value);
          }
          if (and_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder clearAnd() {
          bitField0_ = (bitField0_ & ~0x00000002);
          and_ = null;
          if (andBuilder_ != null) {
            andBuilder_.dispose();
            andBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public event_logging.v4.LogicComplexType.AndComplexType.Builder getAndBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getAndFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder() {
          if (andBuilder_ != null) {
            return andBuilder_.getMessageOrBuilder();
          } else {
            return and_ == null ?
                event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder> 
            getAndFieldBuilder() {
          if (andBuilder_ == null) {
            andBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder>(
                    getAnd(),
                    getParentForChildren(),
                    isClean());
            and_ = null;
          }
          return andBuilder_;
        }

        private event_logging.v4.LogicComplexType.OrComplexType or_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder> orBuilder_;
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         * @return Whether the or field is set.
         */
        public boolean hasOr() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         * @return The or.
         */
        public event_logging.v4.LogicComplexType.OrComplexType getOr() {
          if (orBuilder_ == null) {
            return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
          } else {
            return orBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder setOr(event_logging.v4.LogicComplexType.OrComplexType value) {
          if (orBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            or_ = value;
          } else {
            orBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder setOr(
            event_logging.v4.LogicComplexType.OrComplexType.Builder builderForValue) {
          if (orBuilder_ == null) {
            or_ = builderForValue.build();
          } else {
            orBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder mergeOr(event_logging.v4.LogicComplexType.OrComplexType value) {
          if (orBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
              or_ != null &&
              or_ != event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance()) {
              getOrBuilder().mergeFrom(value);
            } else {
              or_ = value;
            }
          } else {
            orBuilder_.mergeFrom(value);
          }
          if (or_ != null) {
            bitField0_ |= 0x00000004;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder clearOr() {
          bitField0_ = (bitField0_ & ~0x00000004);
          or_ = null;
          if (orBuilder_ != null) {
            orBuilder_.dispose();
            orBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public event_logging.v4.LogicComplexType.OrComplexType.Builder getOrBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getOrFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder() {
          if (orBuilder_ != null) {
            return orBuilder_.getMessageOrBuilder();
          } else {
            return or_ == null ?
                event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder> 
            getOrFieldBuilder() {
          if (orBuilder_ == null) {
            orBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder>(
                    getOr(),
                    getParentForChildren(),
                    isClean());
            or_ = null;
          }
          return orBuilder_;
        }

        private event_logging.v4.LogicComplexType.NotComplexType not_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder> notBuilder_;
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         * @return Whether the not field is set.
         */
        public boolean hasNot() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         * @return The not.
         */
        public event_logging.v4.LogicComplexType.NotComplexType getNot() {
          if (notBuilder_ == null) {
            return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
          } else {
            return notBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder setNot(event_logging.v4.LogicComplexType.NotComplexType value) {
          if (notBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            not_ = value;
          } else {
            notBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder setNot(
            event_logging.v4.LogicComplexType.NotComplexType.Builder builderForValue) {
          if (notBuilder_ == null) {
            not_ = builderForValue.build();
          } else {
            notBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder mergeNot(event_logging.v4.LogicComplexType.NotComplexType value) {
          if (notBuilder_ == null) {
            if (((bitField0_ & 0x00000008) != 0) &&
              not_ != null &&
              not_ != event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance()) {
              getNotBuilder().mergeFrom(value);
            } else {
              not_ = value;
            }
          } else {
            notBuilder_.mergeFrom(value);
          }
          if (not_ != null) {
            bitField0_ |= 0x00000008;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder clearNot() {
          bitField0_ = (bitField0_ & ~0x00000008);
          not_ = null;
          if (notBuilder_ != null) {
            notBuilder_.dispose();
            notBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public event_logging.v4.LogicComplexType.NotComplexType.Builder getNotBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getNotFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder() {
          if (notBuilder_ != null) {
            return notBuilder_.getMessageOrBuilder();
          } else {
            return not_ == null ?
                event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
          }
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder> 
            getNotFieldBuilder() {
          if (notBuilder_ == null) {
            notBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder>(
                    getNot(),
                    getParentForChildren(),
                    isClean());
            not_ = null;
          }
          return notBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType)
      }

      // @@protoc_insertion_point(class_scope:event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType)
      private static final event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType();
      }

      public static event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ChoiceWrapper_AndComplexType>
          PARSER = new com.google.protobuf.AbstractParser<ChoiceWrapper_AndComplexType>() {
        @java.lang.Override
        public ChoiceWrapper_AndComplexType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ChoiceWrapper_AndComplexType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ChoiceWrapper_AndComplexType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int CHOICE_WRAPPER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType> choiceWrapper_;
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType> getChoiceWrapperList() {
      return choiceWrapper_;
    }
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder> 
        getChoiceWrapperOrBuilderList() {
      return choiceWrapper_;
    }
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getChoiceWrapperCount() {
      return choiceWrapper_.size();
    }
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType getChoiceWrapper(int index) {
      return choiceWrapper_.get(index);
    }
    /**
     * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder getChoiceWrapperOrBuilder(
        int index) {
      return choiceWrapper_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < choiceWrapper_.size(); i++) {
        output.writeMessage(1, choiceWrapper_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < choiceWrapper_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, choiceWrapper_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof event_logging.v4.LogicComplexType.AndComplexType)) {
        return super.equals(obj);
      }
      event_logging.v4.LogicComplexType.AndComplexType other = (event_logging.v4.LogicComplexType.AndComplexType) obj;

      if (!getChoiceWrapperList()
          .equals(other.getChoiceWrapperList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getChoiceWrapperCount() > 0) {
        hash = (37 * hash) + CHOICE_WRAPPER_FIELD_NUMBER;
        hash = (53 * hash) + getChoiceWrapperList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static event_logging.v4.LogicComplexType.AndComplexType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static event_logging.v4.LogicComplexType.AndComplexType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.LogicComplexType.AndComplexType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(event_logging.v4.LogicComplexType.AndComplexType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * All of the enclosed items are to be treated as being AND together.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.AndComplexType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.AndComplexType)
        event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.LogicComplexType.AndComplexType.class, event_logging.v4.LogicComplexType.AndComplexType.Builder.class);
      }

      // Construct using event_logging.v4.LogicComplexType.AndComplexType.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (choiceWrapperBuilder_ == null) {
          choiceWrapper_ = java.util.Collections.emptyList();
        } else {
          choiceWrapper_ = null;
          choiceWrapperBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_AndComplexType_descriptor;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexType getDefaultInstanceForType() {
        return event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance();
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexType build() {
        event_logging.v4.LogicComplexType.AndComplexType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexType buildPartial() {
        event_logging.v4.LogicComplexType.AndComplexType result = new event_logging.v4.LogicComplexType.AndComplexType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(event_logging.v4.LogicComplexType.AndComplexType result) {
        if (choiceWrapperBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            choiceWrapper_ = java.util.Collections.unmodifiableList(choiceWrapper_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.choiceWrapper_ = choiceWrapper_;
        } else {
          result.choiceWrapper_ = choiceWrapperBuilder_.build();
        }
      }

      private void buildPartial0(event_logging.v4.LogicComplexType.AndComplexType result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof event_logging.v4.LogicComplexType.AndComplexType) {
          return mergeFrom((event_logging.v4.LogicComplexType.AndComplexType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(event_logging.v4.LogicComplexType.AndComplexType other) {
        if (other == event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance()) return this;
        if (choiceWrapperBuilder_ == null) {
          if (!other.choiceWrapper_.isEmpty()) {
            if (choiceWrapper_.isEmpty()) {
              choiceWrapper_ = other.choiceWrapper_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureChoiceWrapperIsMutable();
              choiceWrapper_.addAll(other.choiceWrapper_);
            }
            onChanged();
          }
        } else {
          if (!other.choiceWrapper_.isEmpty()) {
            if (choiceWrapperBuilder_.isEmpty()) {
              choiceWrapperBuilder_.dispose();
              choiceWrapperBuilder_ = null;
              choiceWrapper_ = other.choiceWrapper_;
              bitField0_ = (bitField0_ & ~0x00000001);
              choiceWrapperBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChoiceWrapperFieldBuilder() : null;
            } else {
              choiceWrapperBuilder_.addAllMessages(other.choiceWrapper_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType m =
                    input.readMessage(
                        event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.parser(),
                        extensionRegistry);
                if (choiceWrapperBuilder_ == null) {
                  ensureChoiceWrapperIsMutable();
                  choiceWrapper_.add(m);
                } else {
                  choiceWrapperBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType> choiceWrapper_ =
        java.util.Collections.emptyList();
      private void ensureChoiceWrapperIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          choiceWrapper_ = new java.util.ArrayList<event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType>(choiceWrapper_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder> choiceWrapperBuilder_;

      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType> getChoiceWrapperList() {
        if (choiceWrapperBuilder_ == null) {
          return java.util.Collections.unmodifiableList(choiceWrapper_);
        } else {
          return choiceWrapperBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public int getChoiceWrapperCount() {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.size();
        } else {
          return choiceWrapperBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType getChoiceWrapper(int index) {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.get(index);
        } else {
          return choiceWrapperBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.set(index, value);
          onChanged();
        } else {
          choiceWrapperBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.set(index, builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(value);
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(index, value);
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(index, builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addAllChoiceWrapper(
          java.lang.Iterable<? extends event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType> values) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, choiceWrapper_);
          onChanged();
        } else {
          choiceWrapperBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder clearChoiceWrapper() {
        if (choiceWrapperBuilder_ == null) {
          choiceWrapper_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          choiceWrapperBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder removeChoiceWrapper(int index) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.remove(index);
          onChanged();
        } else {
          choiceWrapperBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder getChoiceWrapperBuilder(
          int index) {
        return getChoiceWrapperFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder getChoiceWrapperOrBuilder(
          int index) {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.get(index);  } else {
          return choiceWrapperBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder> 
           getChoiceWrapperOrBuilderList() {
        if (choiceWrapperBuilder_ != null) {
          return choiceWrapperBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(choiceWrapper_);
        }
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder addChoiceWrapperBuilder() {
        return getChoiceWrapperFieldBuilder().addBuilder(
            event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.getDefaultInstance());
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder addChoiceWrapperBuilder(
          int index) {
        return getChoiceWrapperFieldBuilder().addBuilder(
            index, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.getDefaultInstance());
      }
      /**
       * <code>repeated .event_logging.v4.AndComplexType.ChoiceWrapper_AndComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder> 
           getChoiceWrapperBuilderList() {
        return getChoiceWrapperFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder> 
          getChoiceWrapperFieldBuilder() {
        if (choiceWrapperBuilder_ == null) {
          choiceWrapperBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexType.ChoiceWrapper_AndComplexTypeOrBuilder>(
                  choiceWrapper_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          choiceWrapper_ = null;
        }
        return choiceWrapperBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.AndComplexType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.AndComplexType)
    private static final event_logging.v4.LogicComplexType.AndComplexType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new event_logging.v4.LogicComplexType.AndComplexType();
    }

    public static event_logging.v4.LogicComplexType.AndComplexType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AndComplexType>
        PARSER = new com.google.protobuf.AbstractParser<AndComplexType>() {
      @java.lang.Override
      public AndComplexType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AndComplexType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AndComplexType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public event_logging.v4.LogicComplexType.AndComplexType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NotComplexTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.NotComplexType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType> 
        getChoiceWrapperList();
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType getChoiceWrapper(int index);
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    int getChoiceWrapperCount();
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder> 
        getChoiceWrapperOrBuilderList();
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder getChoiceWrapperOrBuilder(
        int index);
  }
  /**
   * <pre>
   * The enclosed structure operators and terms are negated.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.NotComplexType}
   */
  public static final class NotComplexType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.NotComplexType)
      NotComplexTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        NotComplexType.class.getName());
    }
    // Use NotComplexType.newBuilder() to construct.
    private NotComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private NotComplexType() {
      choiceWrapper_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              event_logging.v4.LogicComplexType.NotComplexType.class, event_logging.v4.LogicComplexType.NotComplexType.Builder.class);
    }

    public interface ChoiceWrapper_NotComplexTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return Whether the term field is set.
       */
      boolean hasTerm();
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return The term.
       */
      event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm();
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       */
      event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder();

      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return Whether the and field is set.
       */
      boolean hasAnd();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return The and.
       */
      event_logging.v4.LogicComplexType.AndComplexType getAnd();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       */
      event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder();

      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return Whether the or field is set.
       */
      boolean hasOr();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return The or.
       */
      event_logging.v4.LogicComplexType.OrComplexType getOr();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       */
      event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder();

      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return Whether the not field is set.
       */
      boolean hasNot();
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return The not.
       */
      event_logging.v4.LogicComplexType.NotComplexType getNot();
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       */
      event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder();
    }
    /**
     * Protobuf type {@code event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType}
     */
    public static final class ChoiceWrapper_NotComplexType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType)
        ChoiceWrapper_NotComplexTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          ChoiceWrapper_NotComplexType.class.getName());
      }
      // Use ChoiceWrapper_NotComplexType.newBuilder() to construct.
      private ChoiceWrapper_NotComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private ChoiceWrapper_NotComplexType() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.class, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder.class);
      }

      private int bitField0_;
      public static final int TERM_FIELD_NUMBER = 1;
      private event_logging.v4.TermComplexTypeOuterClass.TermComplexType term_;
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return Whether the term field is set.
       */
      @java.lang.Override
      public boolean hasTerm() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return The term.
       */
      @java.lang.Override
      public event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm() {
        return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       */
      @java.lang.Override
      public event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder() {
        return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
      }

      public static final int AND_FIELD_NUMBER = 2;
      private event_logging.v4.LogicComplexType.AndComplexType and_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return Whether the and field is set.
       */
      @java.lang.Override
      public boolean hasAnd() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return The and.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexType getAnd() {
        return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder() {
        return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
      }

      public static final int OR_FIELD_NUMBER = 3;
      private event_logging.v4.LogicComplexType.OrComplexType or_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return Whether the or field is set.
       */
      @java.lang.Override
      public boolean hasOr() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return The or.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexType getOr() {
        return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder() {
        return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
      }

      public static final int NOT_FIELD_NUMBER = 4;
      private event_logging.v4.LogicComplexType.NotComplexType not_;
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return Whether the not field is set.
       */
      @java.lang.Override
      public boolean hasNot() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return The not.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexType getNot() {
        return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder() {
        return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getTerm());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getAnd());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeMessage(3, getOr());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeMessage(4, getNot());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getTerm());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getAnd());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getOr());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getNot());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType)) {
          return super.equals(obj);
        }
        event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType other = (event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType) obj;

        if (hasTerm() != other.hasTerm()) return false;
        if (hasTerm()) {
          if (!getTerm()
              .equals(other.getTerm())) return false;
        }
        if (hasAnd() != other.hasAnd()) return false;
        if (hasAnd()) {
          if (!getAnd()
              .equals(other.getAnd())) return false;
        }
        if (hasOr() != other.hasOr()) return false;
        if (hasOr()) {
          if (!getOr()
              .equals(other.getOr())) return false;
        }
        if (hasNot() != other.hasNot()) return false;
        if (hasNot()) {
          if (!getNot()
              .equals(other.getNot())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTerm()) {
          hash = (37 * hash) + TERM_FIELD_NUMBER;
          hash = (53 * hash) + getTerm().hashCode();
        }
        if (hasAnd()) {
          hash = (37 * hash) + AND_FIELD_NUMBER;
          hash = (53 * hash) + getAnd().hashCode();
        }
        if (hasOr()) {
          hash = (37 * hash) + OR_FIELD_NUMBER;
          hash = (53 * hash) + getOr().hashCode();
        }
        if (hasNot()) {
          hash = (37 * hash) + NOT_FIELD_NUMBER;
          hash = (53 * hash) + getNot().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType)
          event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.class, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder.class);
        }

        // Construct using event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getTermFieldBuilder();
            getAndFieldBuilder();
            getOrFieldBuilder();
            getNotFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          term_ = null;
          if (termBuilder_ != null) {
            termBuilder_.dispose();
            termBuilder_ = null;
          }
          and_ = null;
          if (andBuilder_ != null) {
            andBuilder_.dispose();
            andBuilder_ = null;
          }
          or_ = null;
          if (orBuilder_ != null) {
            orBuilder_.dispose();
            orBuilder_ = null;
          }
          not_ = null;
          if (notBuilder_ != null) {
            notBuilder_.dispose();
            notBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_descriptor;
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType getDefaultInstanceForType() {
          return event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.getDefaultInstance();
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType build() {
          event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType buildPartial() {
          event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType result = new event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.term_ = termBuilder_ == null
                ? term_
                : termBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.and_ = andBuilder_ == null
                ? and_
                : andBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.or_ = orBuilder_ == null
                ? or_
                : orBuilder_.build();
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.not_ = notBuilder_ == null
                ? not_
                : notBuilder_.build();
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType) {
            return mergeFrom((event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType other) {
          if (other == event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.getDefaultInstance()) return this;
          if (other.hasTerm()) {
            mergeTerm(other.getTerm());
          }
          if (other.hasAnd()) {
            mergeAnd(other.getAnd());
          }
          if (other.hasOr()) {
            mergeOr(other.getOr());
          }
          if (other.hasNot()) {
            mergeNot(other.getNot());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getTermFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  input.readMessage(
                      getAndFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getOrFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                case 34: {
                  input.readMessage(
                      getNotFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000008;
                  break;
                } // case 34
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private event_logging.v4.TermComplexTypeOuterClass.TermComplexType term_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder> termBuilder_;
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         * @return Whether the term field is set.
         */
        public boolean hasTerm() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         * @return The term.
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm() {
          if (termBuilder_ == null) {
            return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
          } else {
            return termBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder setTerm(event_logging.v4.TermComplexTypeOuterClass.TermComplexType value) {
          if (termBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            term_ = value;
          } else {
            termBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder setTerm(
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder builderForValue) {
          if (termBuilder_ == null) {
            term_ = builderForValue.build();
          } else {
            termBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder mergeTerm(event_logging.v4.TermComplexTypeOuterClass.TermComplexType value) {
          if (termBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              term_ != null &&
              term_ != event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance()) {
              getTermBuilder().mergeFrom(value);
            } else {
              term_ = value;
            }
          } else {
            termBuilder_.mergeFrom(value);
          }
          if (term_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder clearTerm() {
          bitField0_ = (bitField0_ & ~0x00000001);
          term_ = null;
          if (termBuilder_ != null) {
            termBuilder_.dispose();
            termBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder getTermBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getTermFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder() {
          if (termBuilder_ != null) {
            return termBuilder_.getMessageOrBuilder();
          } else {
            return term_ == null ?
                event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
          }
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder> 
            getTermFieldBuilder() {
          if (termBuilder_ == null) {
            termBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder>(
                    getTerm(),
                    getParentForChildren(),
                    isClean());
            term_ = null;
          }
          return termBuilder_;
        }

        private event_logging.v4.LogicComplexType.AndComplexType and_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder> andBuilder_;
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         * @return Whether the and field is set.
         */
        public boolean hasAnd() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         * @return The and.
         */
        public event_logging.v4.LogicComplexType.AndComplexType getAnd() {
          if (andBuilder_ == null) {
            return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
          } else {
            return andBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder setAnd(event_logging.v4.LogicComplexType.AndComplexType value) {
          if (andBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            and_ = value;
          } else {
            andBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder setAnd(
            event_logging.v4.LogicComplexType.AndComplexType.Builder builderForValue) {
          if (andBuilder_ == null) {
            and_ = builderForValue.build();
          } else {
            andBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder mergeAnd(event_logging.v4.LogicComplexType.AndComplexType value) {
          if (andBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              and_ != null &&
              and_ != event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance()) {
              getAndBuilder().mergeFrom(value);
            } else {
              and_ = value;
            }
          } else {
            andBuilder_.mergeFrom(value);
          }
          if (and_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder clearAnd() {
          bitField0_ = (bitField0_ & ~0x00000002);
          and_ = null;
          if (andBuilder_ != null) {
            andBuilder_.dispose();
            andBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public event_logging.v4.LogicComplexType.AndComplexType.Builder getAndBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getAndFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder() {
          if (andBuilder_ != null) {
            return andBuilder_.getMessageOrBuilder();
          } else {
            return and_ == null ?
                event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder> 
            getAndFieldBuilder() {
          if (andBuilder_ == null) {
            andBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder>(
                    getAnd(),
                    getParentForChildren(),
                    isClean());
            and_ = null;
          }
          return andBuilder_;
        }

        private event_logging.v4.LogicComplexType.OrComplexType or_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder> orBuilder_;
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         * @return Whether the or field is set.
         */
        public boolean hasOr() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         * @return The or.
         */
        public event_logging.v4.LogicComplexType.OrComplexType getOr() {
          if (orBuilder_ == null) {
            return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
          } else {
            return orBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder setOr(event_logging.v4.LogicComplexType.OrComplexType value) {
          if (orBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            or_ = value;
          } else {
            orBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder setOr(
            event_logging.v4.LogicComplexType.OrComplexType.Builder builderForValue) {
          if (orBuilder_ == null) {
            or_ = builderForValue.build();
          } else {
            orBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder mergeOr(event_logging.v4.LogicComplexType.OrComplexType value) {
          if (orBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
              or_ != null &&
              or_ != event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance()) {
              getOrBuilder().mergeFrom(value);
            } else {
              or_ = value;
            }
          } else {
            orBuilder_.mergeFrom(value);
          }
          if (or_ != null) {
            bitField0_ |= 0x00000004;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder clearOr() {
          bitField0_ = (bitField0_ & ~0x00000004);
          or_ = null;
          if (orBuilder_ != null) {
            orBuilder_.dispose();
            orBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public event_logging.v4.LogicComplexType.OrComplexType.Builder getOrBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getOrFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder() {
          if (orBuilder_ != null) {
            return orBuilder_.getMessageOrBuilder();
          } else {
            return or_ == null ?
                event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder> 
            getOrFieldBuilder() {
          if (orBuilder_ == null) {
            orBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder>(
                    getOr(),
                    getParentForChildren(),
                    isClean());
            or_ = null;
          }
          return orBuilder_;
        }

        private event_logging.v4.LogicComplexType.NotComplexType not_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder> notBuilder_;
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         * @return Whether the not field is set.
         */
        public boolean hasNot() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         * @return The not.
         */
        public event_logging.v4.LogicComplexType.NotComplexType getNot() {
          if (notBuilder_ == null) {
            return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
          } else {
            return notBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder setNot(event_logging.v4.LogicComplexType.NotComplexType value) {
          if (notBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            not_ = value;
          } else {
            notBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder setNot(
            event_logging.v4.LogicComplexType.NotComplexType.Builder builderForValue) {
          if (notBuilder_ == null) {
            not_ = builderForValue.build();
          } else {
            notBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder mergeNot(event_logging.v4.LogicComplexType.NotComplexType value) {
          if (notBuilder_ == null) {
            if (((bitField0_ & 0x00000008) != 0) &&
              not_ != null &&
              not_ != event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance()) {
              getNotBuilder().mergeFrom(value);
            } else {
              not_ = value;
            }
          } else {
            notBuilder_.mergeFrom(value);
          }
          if (not_ != null) {
            bitField0_ |= 0x00000008;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder clearNot() {
          bitField0_ = (bitField0_ & ~0x00000008);
          not_ = null;
          if (notBuilder_ != null) {
            notBuilder_.dispose();
            notBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public event_logging.v4.LogicComplexType.NotComplexType.Builder getNotBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getNotFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder() {
          if (notBuilder_ != null) {
            return notBuilder_.getMessageOrBuilder();
          } else {
            return not_ == null ?
                event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
          }
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder> 
            getNotFieldBuilder() {
          if (notBuilder_ == null) {
            notBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder>(
                    getNot(),
                    getParentForChildren(),
                    isClean());
            not_ = null;
          }
          return notBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType)
      }

      // @@protoc_insertion_point(class_scope:event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType)
      private static final event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType();
      }

      public static event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ChoiceWrapper_NotComplexType>
          PARSER = new com.google.protobuf.AbstractParser<ChoiceWrapper_NotComplexType>() {
        @java.lang.Override
        public ChoiceWrapper_NotComplexType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ChoiceWrapper_NotComplexType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ChoiceWrapper_NotComplexType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int CHOICE_WRAPPER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType> choiceWrapper_;
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType> getChoiceWrapperList() {
      return choiceWrapper_;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder> 
        getChoiceWrapperOrBuilderList() {
      return choiceWrapper_;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getChoiceWrapperCount() {
      return choiceWrapper_.size();
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType getChoiceWrapper(int index) {
      return choiceWrapper_.get(index);
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder getChoiceWrapperOrBuilder(
        int index) {
      return choiceWrapper_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < choiceWrapper_.size(); i++) {
        output.writeMessage(1, choiceWrapper_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < choiceWrapper_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, choiceWrapper_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof event_logging.v4.LogicComplexType.NotComplexType)) {
        return super.equals(obj);
      }
      event_logging.v4.LogicComplexType.NotComplexType other = (event_logging.v4.LogicComplexType.NotComplexType) obj;

      if (!getChoiceWrapperList()
          .equals(other.getChoiceWrapperList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getChoiceWrapperCount() > 0) {
        hash = (37 * hash) + CHOICE_WRAPPER_FIELD_NUMBER;
        hash = (53 * hash) + getChoiceWrapperList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static event_logging.v4.LogicComplexType.NotComplexType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static event_logging.v4.LogicComplexType.NotComplexType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.LogicComplexType.NotComplexType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(event_logging.v4.LogicComplexType.NotComplexType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The enclosed structure operators and terms are negated.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.NotComplexType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.NotComplexType)
        event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.LogicComplexType.NotComplexType.class, event_logging.v4.LogicComplexType.NotComplexType.Builder.class);
      }

      // Construct using event_logging.v4.LogicComplexType.NotComplexType.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (choiceWrapperBuilder_ == null) {
          choiceWrapper_ = java.util.Collections.emptyList();
        } else {
          choiceWrapper_ = null;
          choiceWrapperBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_NotComplexType_descriptor;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexType getDefaultInstanceForType() {
        return event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance();
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexType build() {
        event_logging.v4.LogicComplexType.NotComplexType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexType buildPartial() {
        event_logging.v4.LogicComplexType.NotComplexType result = new event_logging.v4.LogicComplexType.NotComplexType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(event_logging.v4.LogicComplexType.NotComplexType result) {
        if (choiceWrapperBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            choiceWrapper_ = java.util.Collections.unmodifiableList(choiceWrapper_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.choiceWrapper_ = choiceWrapper_;
        } else {
          result.choiceWrapper_ = choiceWrapperBuilder_.build();
        }
      }

      private void buildPartial0(event_logging.v4.LogicComplexType.NotComplexType result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof event_logging.v4.LogicComplexType.NotComplexType) {
          return mergeFrom((event_logging.v4.LogicComplexType.NotComplexType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(event_logging.v4.LogicComplexType.NotComplexType other) {
        if (other == event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance()) return this;
        if (choiceWrapperBuilder_ == null) {
          if (!other.choiceWrapper_.isEmpty()) {
            if (choiceWrapper_.isEmpty()) {
              choiceWrapper_ = other.choiceWrapper_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureChoiceWrapperIsMutable();
              choiceWrapper_.addAll(other.choiceWrapper_);
            }
            onChanged();
          }
        } else {
          if (!other.choiceWrapper_.isEmpty()) {
            if (choiceWrapperBuilder_.isEmpty()) {
              choiceWrapperBuilder_.dispose();
              choiceWrapperBuilder_ = null;
              choiceWrapper_ = other.choiceWrapper_;
              bitField0_ = (bitField0_ & ~0x00000001);
              choiceWrapperBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChoiceWrapperFieldBuilder() : null;
            } else {
              choiceWrapperBuilder_.addAllMessages(other.choiceWrapper_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType m =
                    input.readMessage(
                        event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.parser(),
                        extensionRegistry);
                if (choiceWrapperBuilder_ == null) {
                  ensureChoiceWrapperIsMutable();
                  choiceWrapper_.add(m);
                } else {
                  choiceWrapperBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType> choiceWrapper_ =
        java.util.Collections.emptyList();
      private void ensureChoiceWrapperIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          choiceWrapper_ = new java.util.ArrayList<event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType>(choiceWrapper_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder> choiceWrapperBuilder_;

      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType> getChoiceWrapperList() {
        if (choiceWrapperBuilder_ == null) {
          return java.util.Collections.unmodifiableList(choiceWrapper_);
        } else {
          return choiceWrapperBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public int getChoiceWrapperCount() {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.size();
        } else {
          return choiceWrapperBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType getChoiceWrapper(int index) {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.get(index);
        } else {
          return choiceWrapperBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.set(index, value);
          onChanged();
        } else {
          choiceWrapperBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.set(index, builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(value);
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(index, value);
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(index, builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addAllChoiceWrapper(
          java.lang.Iterable<? extends event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType> values) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, choiceWrapper_);
          onChanged();
        } else {
          choiceWrapperBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder clearChoiceWrapper() {
        if (choiceWrapperBuilder_ == null) {
          choiceWrapper_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          choiceWrapperBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder removeChoiceWrapper(int index) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.remove(index);
          onChanged();
        } else {
          choiceWrapperBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder getChoiceWrapperBuilder(
          int index) {
        return getChoiceWrapperFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder getChoiceWrapperOrBuilder(
          int index) {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.get(index);  } else {
          return choiceWrapperBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder> 
           getChoiceWrapperOrBuilderList() {
        if (choiceWrapperBuilder_ != null) {
          return choiceWrapperBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(choiceWrapper_);
        }
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder addChoiceWrapperBuilder() {
        return getChoiceWrapperFieldBuilder().addBuilder(
            event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.getDefaultInstance());
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder addChoiceWrapperBuilder(
          int index) {
        return getChoiceWrapperFieldBuilder().addBuilder(
            index, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.getDefaultInstance());
      }
      /**
       * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapper_NotComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder> 
           getChoiceWrapperBuilderList() {
        return getChoiceWrapperFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder> 
          getChoiceWrapperFieldBuilder() {
        if (choiceWrapperBuilder_ == null) {
          choiceWrapperBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexType.ChoiceWrapper_NotComplexTypeOrBuilder>(
                  choiceWrapper_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          choiceWrapper_ = null;
        }
        return choiceWrapperBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.NotComplexType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.NotComplexType)
    private static final event_logging.v4.LogicComplexType.NotComplexType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new event_logging.v4.LogicComplexType.NotComplexType();
    }

    public static event_logging.v4.LogicComplexType.NotComplexType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NotComplexType>
        PARSER = new com.google.protobuf.AbstractParser<NotComplexType>() {
      @java.lang.Override
      public NotComplexType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<NotComplexType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NotComplexType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public event_logging.v4.LogicComplexType.NotComplexType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OrComplexTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.OrComplexType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType> 
        getChoiceWrapperList();
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType getChoiceWrapper(int index);
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    int getChoiceWrapperCount();
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder> 
        getChoiceWrapperOrBuilderList();
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder getChoiceWrapperOrBuilder(
        int index);
  }
  /**
   * <pre>
   * All of the enclosed items are to be treated as being OR together.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.OrComplexType}
   */
  public static final class OrComplexType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.OrComplexType)
      OrComplexTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        OrComplexType.class.getName());
    }
    // Use OrComplexType.newBuilder() to construct.
    private OrComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private OrComplexType() {
      choiceWrapper_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              event_logging.v4.LogicComplexType.OrComplexType.class, event_logging.v4.LogicComplexType.OrComplexType.Builder.class);
    }

    public interface ChoiceWrapper_OrComplexTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return Whether the term field is set.
       */
      boolean hasTerm();
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return The term.
       */
      event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm();
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       */
      event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder();

      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return Whether the and field is set.
       */
      boolean hasAnd();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return The and.
       */
      event_logging.v4.LogicComplexType.AndComplexType getAnd();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       */
      event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder();

      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return Whether the or field is set.
       */
      boolean hasOr();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return The or.
       */
      event_logging.v4.LogicComplexType.OrComplexType getOr();
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       */
      event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder();

      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return Whether the not field is set.
       */
      boolean hasNot();
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return The not.
       */
      event_logging.v4.LogicComplexType.NotComplexType getNot();
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       */
      event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder();
    }
    /**
     * Protobuf type {@code event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType}
     */
    public static final class ChoiceWrapper_OrComplexType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType)
        ChoiceWrapper_OrComplexTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          ChoiceWrapper_OrComplexType.class.getName());
      }
      // Use ChoiceWrapper_OrComplexType.newBuilder() to construct.
      private ChoiceWrapper_OrComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private ChoiceWrapper_OrComplexType() {
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.class, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder.class);
      }

      private int bitField0_;
      public static final int TERM_FIELD_NUMBER = 1;
      private event_logging.v4.TermComplexTypeOuterClass.TermComplexType term_;
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return Whether the term field is set.
       */
      @java.lang.Override
      public boolean hasTerm() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       * @return The term.
       */
      @java.lang.Override
      public event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm() {
        return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1;</code>
       */
      @java.lang.Override
      public event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder() {
        return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
      }

      public static final int AND_FIELD_NUMBER = 2;
      private event_logging.v4.LogicComplexType.AndComplexType and_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return Whether the and field is set.
       */
      @java.lang.Override
      public boolean hasAnd() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       * @return The and.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexType getAnd() {
        return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder() {
        return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
      }

      public static final int OR_FIELD_NUMBER = 3;
      private event_logging.v4.LogicComplexType.OrComplexType or_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return Whether the or field is set.
       */
      @java.lang.Override
      public boolean hasOr() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       * @return The or.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexType getOr() {
        return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder() {
        return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
      }

      public static final int NOT_FIELD_NUMBER = 4;
      private event_logging.v4.LogicComplexType.NotComplexType not_;
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return Whether the not field is set.
       */
      @java.lang.Override
      public boolean hasNot() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       * @return The not.
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexType getNot() {
        return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4;</code>
       */
      @java.lang.Override
      public event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder() {
        return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(1, getTerm());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(2, getAnd());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeMessage(3, getOr());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeMessage(4, getNot());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getTerm());
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getAnd());
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getOr());
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getNot());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType)) {
          return super.equals(obj);
        }
        event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType other = (event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType) obj;

        if (hasTerm() != other.hasTerm()) return false;
        if (hasTerm()) {
          if (!getTerm()
              .equals(other.getTerm())) return false;
        }
        if (hasAnd() != other.hasAnd()) return false;
        if (hasAnd()) {
          if (!getAnd()
              .equals(other.getAnd())) return false;
        }
        if (hasOr() != other.hasOr()) return false;
        if (hasOr()) {
          if (!getOr()
              .equals(other.getOr())) return false;
        }
        if (hasNot() != other.hasNot()) return false;
        if (hasNot()) {
          if (!getNot()
              .equals(other.getNot())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTerm()) {
          hash = (37 * hash) + TERM_FIELD_NUMBER;
          hash = (53 * hash) + getTerm().hashCode();
        }
        if (hasAnd()) {
          hash = (37 * hash) + AND_FIELD_NUMBER;
          hash = (53 * hash) + getAnd().hashCode();
        }
        if (hasOr()) {
          hash = (37 * hash) + OR_FIELD_NUMBER;
          hash = (53 * hash) + getOr().hashCode();
        }
        if (hasNot()) {
          hash = (37 * hash) + NOT_FIELD_NUMBER;
          hash = (53 * hash) + getNot().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType)
          event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.class, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder.class);
        }

        // Construct using event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getTermFieldBuilder();
            getAndFieldBuilder();
            getOrFieldBuilder();
            getNotFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          term_ = null;
          if (termBuilder_ != null) {
            termBuilder_.dispose();
            termBuilder_ = null;
          }
          and_ = null;
          if (andBuilder_ != null) {
            andBuilder_.dispose();
            andBuilder_ = null;
          }
          or_ = null;
          if (orBuilder_ != null) {
            orBuilder_.dispose();
            orBuilder_ = null;
          }
          not_ = null;
          if (notBuilder_ != null) {
            notBuilder_.dispose();
            notBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_descriptor;
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType getDefaultInstanceForType() {
          return event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.getDefaultInstance();
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType build() {
          event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType buildPartial() {
          event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType result = new event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType result) {
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.term_ = termBuilder_ == null
                ? term_
                : termBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.and_ = andBuilder_ == null
                ? and_
                : andBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.or_ = orBuilder_ == null
                ? or_
                : orBuilder_.build();
            to_bitField0_ |= 0x00000004;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.not_ = notBuilder_ == null
                ? not_
                : notBuilder_.build();
            to_bitField0_ |= 0x00000008;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType) {
            return mergeFrom((event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType other) {
          if (other == event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.getDefaultInstance()) return this;
          if (other.hasTerm()) {
            mergeTerm(other.getTerm());
          }
          if (other.hasAnd()) {
            mergeAnd(other.getAnd());
          }
          if (other.hasOr()) {
            mergeOr(other.getOr());
          }
          if (other.hasNot()) {
            mergeNot(other.getNot());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  input.readMessage(
                      getTermFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  input.readMessage(
                      getAndFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getOrFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                case 34: {
                  input.readMessage(
                      getNotFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000008;
                  break;
                } // case 34
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private event_logging.v4.TermComplexTypeOuterClass.TermComplexType term_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder> termBuilder_;
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         * @return Whether the term field is set.
         */
        public boolean hasTerm() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         * @return The term.
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexType getTerm() {
          if (termBuilder_ == null) {
            return term_ == null ? event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
          } else {
            return termBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder setTerm(event_logging.v4.TermComplexTypeOuterClass.TermComplexType value) {
          if (termBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            term_ = value;
          } else {
            termBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder setTerm(
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder builderForValue) {
          if (termBuilder_ == null) {
            term_ = builderForValue.build();
          } else {
            termBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder mergeTerm(event_logging.v4.TermComplexTypeOuterClass.TermComplexType value) {
          if (termBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0) &&
              term_ != null &&
              term_ != event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance()) {
              getTermBuilder().mergeFrom(value);
            } else {
              term_ = value;
            }
          } else {
            termBuilder_.mergeFrom(value);
          }
          if (term_ != null) {
            bitField0_ |= 0x00000001;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public Builder clearTerm() {
          bitField0_ = (bitField0_ & ~0x00000001);
          term_ = null;
          if (termBuilder_ != null) {
            termBuilder_.dispose();
            termBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder getTermBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getTermFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        public event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder getTermOrBuilder() {
          if (termBuilder_ != null) {
            return termBuilder_.getMessageOrBuilder();
          } else {
            return term_ == null ?
                event_logging.v4.TermComplexTypeOuterClass.TermComplexType.getDefaultInstance() : term_;
          }
        }
        /**
         * <pre>
         * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
         * </pre>
         *
         * <code>.event_logging.v4.TermComplexType term = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder> 
            getTermFieldBuilder() {
          if (termBuilder_ == null) {
            termBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.TermComplexTypeOuterClass.TermComplexType, event_logging.v4.TermComplexTypeOuterClass.TermComplexType.Builder, event_logging.v4.TermComplexTypeOuterClass.TermComplexTypeOrBuilder>(
                    getTerm(),
                    getParentForChildren(),
                    isClean());
            term_ = null;
          }
          return termBuilder_;
        }

        private event_logging.v4.LogicComplexType.AndComplexType and_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder> andBuilder_;
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         * @return Whether the and field is set.
         */
        public boolean hasAnd() {
          return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         * @return The and.
         */
        public event_logging.v4.LogicComplexType.AndComplexType getAnd() {
          if (andBuilder_ == null) {
            return and_ == null ? event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
          } else {
            return andBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder setAnd(event_logging.v4.LogicComplexType.AndComplexType value) {
          if (andBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            and_ = value;
          } else {
            andBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder setAnd(
            event_logging.v4.LogicComplexType.AndComplexType.Builder builderForValue) {
          if (andBuilder_ == null) {
            and_ = builderForValue.build();
          } else {
            andBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder mergeAnd(event_logging.v4.LogicComplexType.AndComplexType value) {
          if (andBuilder_ == null) {
            if (((bitField0_ & 0x00000002) != 0) &&
              and_ != null &&
              and_ != event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance()) {
              getAndBuilder().mergeFrom(value);
            } else {
              and_ = value;
            }
          } else {
            andBuilder_.mergeFrom(value);
          }
          if (and_ != null) {
            bitField0_ |= 0x00000002;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public Builder clearAnd() {
          bitField0_ = (bitField0_ & ~0x00000002);
          and_ = null;
          if (andBuilder_ != null) {
            andBuilder_.dispose();
            andBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public event_logging.v4.LogicComplexType.AndComplexType.Builder getAndBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getAndFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        public event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder getAndOrBuilder() {
          if (andBuilder_ != null) {
            return andBuilder_.getMessageOrBuilder();
          } else {
            return and_ == null ?
                event_logging.v4.LogicComplexType.AndComplexType.getDefaultInstance() : and_;
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being AND'd together.
         * </pre>
         *
         * <code>.event_logging.v4.AndComplexType and = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder> 
            getAndFieldBuilder() {
          if (andBuilder_ == null) {
            andBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.AndComplexType, event_logging.v4.LogicComplexType.AndComplexType.Builder, event_logging.v4.LogicComplexType.AndComplexTypeOrBuilder>(
                    getAnd(),
                    getParentForChildren(),
                    isClean());
            and_ = null;
          }
          return andBuilder_;
        }

        private event_logging.v4.LogicComplexType.OrComplexType or_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder> orBuilder_;
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         * @return Whether the or field is set.
         */
        public boolean hasOr() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         * @return The or.
         */
        public event_logging.v4.LogicComplexType.OrComplexType getOr() {
          if (orBuilder_ == null) {
            return or_ == null ? event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
          } else {
            return orBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder setOr(event_logging.v4.LogicComplexType.OrComplexType value) {
          if (orBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            or_ = value;
          } else {
            orBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder setOr(
            event_logging.v4.LogicComplexType.OrComplexType.Builder builderForValue) {
          if (orBuilder_ == null) {
            or_ = builderForValue.build();
          } else {
            orBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder mergeOr(event_logging.v4.LogicComplexType.OrComplexType value) {
          if (orBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
              or_ != null &&
              or_ != event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance()) {
              getOrBuilder().mergeFrom(value);
            } else {
              or_ = value;
            }
          } else {
            orBuilder_.mergeFrom(value);
          }
          if (or_ != null) {
            bitField0_ |= 0x00000004;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public Builder clearOr() {
          bitField0_ = (bitField0_ & ~0x00000004);
          or_ = null;
          if (orBuilder_ != null) {
            orBuilder_.dispose();
            orBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public event_logging.v4.LogicComplexType.OrComplexType.Builder getOrBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getOrFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        public event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder getOrOrBuilder() {
          if (orBuilder_ != null) {
            return orBuilder_.getMessageOrBuilder();
          } else {
            return or_ == null ?
                event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance() : or_;
          }
        }
        /**
         * <pre>
         * All of the enclosed items are to be treated as being OR'd together.
         * </pre>
         *
         * <code>.event_logging.v4.OrComplexType or = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder> 
            getOrFieldBuilder() {
          if (orBuilder_ == null) {
            orBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder>(
                    getOr(),
                    getParentForChildren(),
                    isClean());
            or_ = null;
          }
          return orBuilder_;
        }

        private event_logging.v4.LogicComplexType.NotComplexType not_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder> notBuilder_;
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         * @return Whether the not field is set.
         */
        public boolean hasNot() {
          return ((bitField0_ & 0x00000008) != 0);
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         * @return The not.
         */
        public event_logging.v4.LogicComplexType.NotComplexType getNot() {
          if (notBuilder_ == null) {
            return not_ == null ? event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
          } else {
            return notBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder setNot(event_logging.v4.LogicComplexType.NotComplexType value) {
          if (notBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            not_ = value;
          } else {
            notBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder setNot(
            event_logging.v4.LogicComplexType.NotComplexType.Builder builderForValue) {
          if (notBuilder_ == null) {
            not_ = builderForValue.build();
          } else {
            notBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder mergeNot(event_logging.v4.LogicComplexType.NotComplexType value) {
          if (notBuilder_ == null) {
            if (((bitField0_ & 0x00000008) != 0) &&
              not_ != null &&
              not_ != event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance()) {
              getNotBuilder().mergeFrom(value);
            } else {
              not_ = value;
            }
          } else {
            notBuilder_.mergeFrom(value);
          }
          if (not_ != null) {
            bitField0_ |= 0x00000008;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public Builder clearNot() {
          bitField0_ = (bitField0_ & ~0x00000008);
          not_ = null;
          if (notBuilder_ != null) {
            notBuilder_.dispose();
            notBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public event_logging.v4.LogicComplexType.NotComplexType.Builder getNotBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getNotFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        public event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder getNotOrBuilder() {
          if (notBuilder_ != null) {
            return notBuilder_.getMessageOrBuilder();
          } else {
            return not_ == null ?
                event_logging.v4.LogicComplexType.NotComplexType.getDefaultInstance() : not_;
          }
        }
        /**
         * <pre>
         * The enclosed structure operators and terms are negated.
         * </pre>
         *
         * <code>.event_logging.v4.NotComplexType not = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder> 
            getNotFieldBuilder() {
          if (notBuilder_ == null) {
            notBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LogicComplexType.NotComplexType, event_logging.v4.LogicComplexType.NotComplexType.Builder, event_logging.v4.LogicComplexType.NotComplexTypeOrBuilder>(
                    getNot(),
                    getParentForChildren(),
                    isClean());
            not_ = null;
          }
          return notBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType)
      }

      // @@protoc_insertion_point(class_scope:event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType)
      private static final event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType();
      }

      public static event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ChoiceWrapper_OrComplexType>
          PARSER = new com.google.protobuf.AbstractParser<ChoiceWrapper_OrComplexType>() {
        @java.lang.Override
        public ChoiceWrapper_OrComplexType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ChoiceWrapper_OrComplexType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ChoiceWrapper_OrComplexType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int CHOICE_WRAPPER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType> choiceWrapper_;
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType> getChoiceWrapperList() {
      return choiceWrapper_;
    }
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder> 
        getChoiceWrapperOrBuilderList() {
      return choiceWrapper_;
    }
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getChoiceWrapperCount() {
      return choiceWrapper_.size();
    }
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType getChoiceWrapper(int index) {
      return choiceWrapper_.get(index);
    }
    /**
     * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder getChoiceWrapperOrBuilder(
        int index) {
      return choiceWrapper_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < choiceWrapper_.size(); i++) {
        output.writeMessage(1, choiceWrapper_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < choiceWrapper_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, choiceWrapper_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof event_logging.v4.LogicComplexType.OrComplexType)) {
        return super.equals(obj);
      }
      event_logging.v4.LogicComplexType.OrComplexType other = (event_logging.v4.LogicComplexType.OrComplexType) obj;

      if (!getChoiceWrapperList()
          .equals(other.getChoiceWrapperList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getChoiceWrapperCount() > 0) {
        hash = (37 * hash) + CHOICE_WRAPPER_FIELD_NUMBER;
        hash = (53 * hash) + getChoiceWrapperList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static event_logging.v4.LogicComplexType.OrComplexType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static event_logging.v4.LogicComplexType.OrComplexType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.LogicComplexType.OrComplexType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(event_logging.v4.LogicComplexType.OrComplexType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * All of the enclosed items are to be treated as being OR together.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.OrComplexType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.OrComplexType)
        event_logging.v4.LogicComplexType.OrComplexTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.LogicComplexType.OrComplexType.class, event_logging.v4.LogicComplexType.OrComplexType.Builder.class);
      }

      // Construct using event_logging.v4.LogicComplexType.OrComplexType.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (choiceWrapperBuilder_ == null) {
          choiceWrapper_ = java.util.Collections.emptyList();
        } else {
          choiceWrapper_ = null;
          choiceWrapperBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return event_logging.v4.LogicComplexType.internal_static_event_logging_v4_OrComplexType_descriptor;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexType getDefaultInstanceForType() {
        return event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance();
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexType build() {
        event_logging.v4.LogicComplexType.OrComplexType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public event_logging.v4.LogicComplexType.OrComplexType buildPartial() {
        event_logging.v4.LogicComplexType.OrComplexType result = new event_logging.v4.LogicComplexType.OrComplexType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(event_logging.v4.LogicComplexType.OrComplexType result) {
        if (choiceWrapperBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            choiceWrapper_ = java.util.Collections.unmodifiableList(choiceWrapper_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.choiceWrapper_ = choiceWrapper_;
        } else {
          result.choiceWrapper_ = choiceWrapperBuilder_.build();
        }
      }

      private void buildPartial0(event_logging.v4.LogicComplexType.OrComplexType result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof event_logging.v4.LogicComplexType.OrComplexType) {
          return mergeFrom((event_logging.v4.LogicComplexType.OrComplexType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(event_logging.v4.LogicComplexType.OrComplexType other) {
        if (other == event_logging.v4.LogicComplexType.OrComplexType.getDefaultInstance()) return this;
        if (choiceWrapperBuilder_ == null) {
          if (!other.choiceWrapper_.isEmpty()) {
            if (choiceWrapper_.isEmpty()) {
              choiceWrapper_ = other.choiceWrapper_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureChoiceWrapperIsMutable();
              choiceWrapper_.addAll(other.choiceWrapper_);
            }
            onChanged();
          }
        } else {
          if (!other.choiceWrapper_.isEmpty()) {
            if (choiceWrapperBuilder_.isEmpty()) {
              choiceWrapperBuilder_.dispose();
              choiceWrapperBuilder_ = null;
              choiceWrapper_ = other.choiceWrapper_;
              bitField0_ = (bitField0_ & ~0x00000001);
              choiceWrapperBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getChoiceWrapperFieldBuilder() : null;
            } else {
              choiceWrapperBuilder_.addAllMessages(other.choiceWrapper_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType m =
                    input.readMessage(
                        event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.parser(),
                        extensionRegistry);
                if (choiceWrapperBuilder_ == null) {
                  ensureChoiceWrapperIsMutable();
                  choiceWrapper_.add(m);
                } else {
                  choiceWrapperBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType> choiceWrapper_ =
        java.util.Collections.emptyList();
      private void ensureChoiceWrapperIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          choiceWrapper_ = new java.util.ArrayList<event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType>(choiceWrapper_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder> choiceWrapperBuilder_;

      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType> getChoiceWrapperList() {
        if (choiceWrapperBuilder_ == null) {
          return java.util.Collections.unmodifiableList(choiceWrapper_);
        } else {
          return choiceWrapperBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public int getChoiceWrapperCount() {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.size();
        } else {
          return choiceWrapperBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType getChoiceWrapper(int index) {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.get(index);
        } else {
          return choiceWrapperBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.set(index, value);
          onChanged();
        } else {
          choiceWrapperBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.set(index, builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(value);
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType value) {
        if (choiceWrapperBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(index, value);
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addChoiceWrapper(
          int index, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder builderForValue) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.add(index, builderForValue.build());
          onChanged();
        } else {
          choiceWrapperBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addAllChoiceWrapper(
          java.lang.Iterable<? extends event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType> values) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, choiceWrapper_);
          onChanged();
        } else {
          choiceWrapperBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder clearChoiceWrapper() {
        if (choiceWrapperBuilder_ == null) {
          choiceWrapper_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          choiceWrapperBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public Builder removeChoiceWrapper(int index) {
        if (choiceWrapperBuilder_ == null) {
          ensureChoiceWrapperIsMutable();
          choiceWrapper_.remove(index);
          onChanged();
        } else {
          choiceWrapperBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder getChoiceWrapperBuilder(
          int index) {
        return getChoiceWrapperFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder getChoiceWrapperOrBuilder(
          int index) {
        if (choiceWrapperBuilder_ == null) {
          return choiceWrapper_.get(index);  } else {
          return choiceWrapperBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder> 
           getChoiceWrapperOrBuilderList() {
        if (choiceWrapperBuilder_ != null) {
          return choiceWrapperBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(choiceWrapper_);
        }
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder addChoiceWrapperBuilder() {
        return getChoiceWrapperFieldBuilder().addBuilder(
            event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.getDefaultInstance());
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder addChoiceWrapperBuilder(
          int index) {
        return getChoiceWrapperFieldBuilder().addBuilder(
            index, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.getDefaultInstance());
      }
      /**
       * <code>repeated .event_logging.v4.OrComplexType.ChoiceWrapper_OrComplexType choice_wrapper = 1 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder> 
           getChoiceWrapperBuilderList() {
        return getChoiceWrapperFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder> 
          getChoiceWrapperFieldBuilder() {
        if (choiceWrapperBuilder_ == null) {
          choiceWrapperBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexType.Builder, event_logging.v4.LogicComplexType.OrComplexType.ChoiceWrapper_OrComplexTypeOrBuilder>(
                  choiceWrapper_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          choiceWrapper_ = null;
        }
        return choiceWrapperBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.OrComplexType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.OrComplexType)
    private static final event_logging.v4.LogicComplexType.OrComplexType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new event_logging.v4.LogicComplexType.OrComplexType();
    }

    public static event_logging.v4.LogicComplexType.OrComplexType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OrComplexType>
        PARSER = new com.google.protobuf.AbstractParser<OrComplexType>() {
      @java.lang.Override
      public OrComplexType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OrComplexType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OrComplexType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public event_logging.v4.LogicComplexType.OrComplexType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_AndComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_AndComplexType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_NotComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_NotComplexType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_OrComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_OrComplexType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)event_logging/v4/logic_complex_type.pr" +
      "oto\022\020event_logging.v4\032(event_logging/v4/" +
      "term_complex_type.proto\032\033buf/validate/va" +
      "lidate.proto\"\314\002\n\016AndComplexType\022]\n\016choic" +
      "e_wrapper\030\001 \003(\0132=.event_logging.v4.AndCo" +
      "mplexType.ChoiceWrapper_AndComplexTypeB\006" +
      "\272H\003\222\001\000\032\332\001\n\034ChoiceWrapper_AndComplexType\022" +
      "/\n\004term\030\001 \001(\0132!.event_logging.v4.TermCom" +
      "plexType\022-\n\003and\030\002 \001(\0132 .event_logging.v4" +
      ".AndComplexType\022+\n\002or\030\003 \001(\0132\037.event_logg" +
      "ing.v4.OrComplexType\022-\n\003not\030\004 \001(\0132 .even" +
      "t_logging.v4.NotComplexType\"\314\002\n\016NotCompl" +
      "exType\022]\n\016choice_wrapper\030\001 \003(\0132=.event_l" +
      "ogging.v4.NotComplexType.ChoiceWrapper_N" +
      "otComplexTypeB\006\272H\003\222\001\000\032\332\001\n\034ChoiceWrapper_" +
      "NotComplexType\022/\n\004term\030\001 \001(\0132!.event_log" +
      "ging.v4.TermComplexType\022-\n\003and\030\002 \001(\0132 .e" +
      "vent_logging.v4.AndComplexType\022+\n\002or\030\003 \001" +
      "(\0132\037.event_logging.v4.OrComplexType\022-\n\003n" +
      "ot\030\004 \001(\0132 .event_logging.v4.NotComplexTy" +
      "pe\"\310\002\n\rOrComplexType\022[\n\016choice_wrapper\030\001" +
      " \003(\0132;.event_logging.v4.OrComplexType.Ch" +
      "oiceWrapper_OrComplexTypeB\006\272H\003\222\001\000\032\331\001\n\033Ch" +
      "oiceWrapper_OrComplexType\022/\n\004term\030\001 \001(\0132" +
      "!.event_logging.v4.TermComplexType\022-\n\003an" +
      "d\030\002 \001(\0132 .event_logging.v4.AndComplexTyp" +
      "e\022+\n\002or\030\003 \001(\0132\037.event_logging.v4.OrCompl" +
      "exType\022-\n\003not\030\004 \001(\0132 .event_logging.v4.N" +
      "otComplexTypeb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          event_logging.v4.TermComplexTypeOuterClass.getDescriptor(),
          build.buf.validate.ValidateProto.getDescriptor(),
        });
    internal_static_event_logging_v4_AndComplexType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_event_logging_v4_AndComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_AndComplexType_descriptor,
        new java.lang.String[] { "ChoiceWrapper", });
    internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_descriptor =
      internal_static_event_logging_v4_AndComplexType_descriptor.getNestedTypes().get(0);
    internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_AndComplexType_ChoiceWrapper_AndComplexType_descriptor,
        new java.lang.String[] { "Term", "And", "Or", "Not", });
    internal_static_event_logging_v4_NotComplexType_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_event_logging_v4_NotComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_NotComplexType_descriptor,
        new java.lang.String[] { "ChoiceWrapper", });
    internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_descriptor =
      internal_static_event_logging_v4_NotComplexType_descriptor.getNestedTypes().get(0);
    internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_NotComplexType_ChoiceWrapper_NotComplexType_descriptor,
        new java.lang.String[] { "Term", "And", "Or", "Not", });
    internal_static_event_logging_v4_OrComplexType_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_event_logging_v4_OrComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_OrComplexType_descriptor,
        new java.lang.String[] { "ChoiceWrapper", });
    internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_descriptor =
      internal_static_event_logging_v4_OrComplexType_descriptor.getNestedTypes().get(0);
    internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_OrComplexType_ChoiceWrapper_OrComplexType_descriptor,
        new java.lang.String[] { "Term", "And", "Or", "Not", });
    descriptor.resolveAllFeaturesImmutable();
    event_logging.v4.TermComplexTypeOuterClass.getDescriptor();
    build.buf.validate.ValidateProto.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(build.buf.validate.ValidateProto.field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
