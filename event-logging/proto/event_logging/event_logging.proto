// event_logging.proto at 0:0
syntax = "proto3";
package event_logging;

import "event_logging/any_content_complex_type/event_logging_any_content_complex_type.proto";
import "event_logging/classification_complex_type/event_logging_classification_complex_type.proto";
import "event_logging/data_complex_type/event_logging_data_complex_type.proto";
import "event_logging/event_chain_complex_type/event_logging_event_chain_complex_type.proto";
import "event_logging/event_detail_complex_type/event_logging_event_detail_complex_type.proto";
import "event_logging/event_source_complex_type/event_logging_event_source_complex_type.proto";
import "event_logging/event_time_complex_type/event_logging_event_time_complex_type.proto";
import "event_logging/version_simple_type/event_logging_version_simple_type.proto";
import "validate/validate.proto";

// The root element that contains multiple Event elements.
message EventsType {
  // The version of the schema that this document conforms to.
  event_logging.version_simple_type.VersionSimpleType version = 1;
  // This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
  event_logging.any_content_complex_type.AnyContentComplexType sharing_data = 2;
  // A single event that has occurred and been recorded.
  repeated EventType event = 3 [
    (validate.rules).repeated = {
      min_items: 0
    }
  ];

  // A single event that has occurred and been recorded.
  message EventType {
    // This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
    repeated event_logging.any_content_complex_type.AnyContentComplexType meta = 1 [
      (validate.rules).repeated = {
        min_items: 0
      }
    ];
    // The classification for the event.
    event_logging.classification_complex_type.ClassificationComplexType classification = 2;
    // This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
    event_logging.any_content_complex_type.AnyContentComplexType sharing_data = 3;
    // This element contains information about the time the event was created.
    event_logging.event_time_complex_type.EventTimeComplexType event_time = 4 [
      (validate.rules).message.required = true
    ];
    // This element details where the event came from, i.e. what generator created the event and on what device.
    event_logging.event_source_complex_type.EventSourceComplexType event_source = 5 [
      (validate.rules).message.required = true
    ];
    // This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
    event_logging.event_detail_complex_type.EventDetailComplexType event_detail = 6 [
      (validate.rules).message.required = true
    ];
    // This element can be used to create relationships between different events, i.e. where one event is the child of another.
    event_logging.event_chain_complex_type.EventChainComplexType event_chain = 7;
    // Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
    repeated event_logging.data_complex_type.DataComplexType data = 8 [
      (validate.rules).repeated = {
        min_items: 0
      }
    ];
  }
}
