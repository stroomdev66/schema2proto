// event_logging_update_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.update_complex_type;

import "event_logging/data_complex_type/event_logging_data_complex_type.proto";
import "event_logging/multi_object_complex_type/event_logging_multi_object_complex_type.proto";
import "event_logging/outcome_complex_type/event_logging_outcome_complex_type.proto";
import "validate/validate.proto";

// Describes the update/modification/change to a file, object, entity, piece of data, etc.
message UpdateComplexType {
  // Describes the state of one or more object properties before it was changed.
  event_logging.multi_object_complex_type.MultiObjectComplexType before = 1;
  // Describes the state of one or more object properties after it was changed.
  event_logging.multi_object_complex_type.MultiObjectComplexType after = 2 [
    (validate.rules).message.required = true
  ];
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  event_logging.outcome_complex_type.OutcomeComplexType outcome = 3;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated event_logging.data_complex_type.DataComplexType data = 4 [
    (validate.rules).repeated = {
      min_items: 0
    }
  ];
}
