// event_logging_outcome_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.outcome_complex_type;

import "event_logging/data_complex_type/event_logging_data_complex_type.proto";
import "validate/validate.proto";

// Describes the outcome of an event whether it is successful and whether it was permitted.
message OutcomeComplexType {
  // If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool success = 1;
  // If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool permitted = 2;
  // A description of the authorisation service that was used to decide if the action was permitted.
  AuthServiceType auth_service = 3;
  // Human readable text that describes the outcome.
  string description = 4;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated event_logging.data_complex_type.DataComplexType data = 5 [
    (validate.rules).repeated = {
      min_items: 0
    }
  ];

  // A description of the authorisation service that was used to decide if the action was permitted.
  message AuthServiceType {
    // An identifier for the authorisation service, usually a URI string.
    string id = 1;
    // The number of seconds a system is allowed to cache this authorisation before it needs to be checked again.
    uint32 cache_timeout = 2 [
      (validate.rules).uint32.gt = 0
    ];
  }
}
