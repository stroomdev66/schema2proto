// event_logging_process_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.process_complex_type;

import "event_logging/data_complex_type/event_logging_data_complex_type.proto";
import "event_logging/multi_object_complex_type/event_logging_multi_object_complex_type.proto";
import "event_logging/outcome_complex_type/event_logging_outcome_complex_type.proto";
import "event_logging/process_action_simple_type/event_logging_process_action_simple_type.proto";
import "event_logging/process_type_simple_type/event_logging_process_type_simple_type.proto";
import "validate/validate.proto";

// Describes various actions such as the startup/shutdown/install of operating systems, services, applications. It also describes the execution of operating system commands, shell scripts and batch processes.
message ProcessComplexType {
  // The action that the process event is capturing, e.g. Startup, Shutdown.
  event_logging.process_action_simple_type.ProcessActionSimpleType action = 1 [
    (validate.rules).message.required = true
  ];
  // The type of process, e.g. Application, OS, Service.
  event_logging.process_type_simple_type.ProcessTypeSimpleType type = 2 [
    (validate.rules).message.required = true
  ];
  // The name of the process.
  string command = 3 [
    (validate.rules).message.required = true
  ];
  // The process command arguments/parameters.
  string arguments = 4;
  // The system identifier for the process.
  string process_id = 5;
  // The thread identifier for the process.
  uint32 thread_id = 6 [
    (validate.rules).uint32.gt = 0
  ];
  // The rule that was triggered when this process event happened.
  string rule = 7;
  // Any objects used as input to the process.
  event_logging.multi_object_complex_type.MultiObjectComplexType input = 8;
  // Any objects output by the process
  event_logging.multi_object_complex_type.MultiObjectComplexType output = 9;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  event_logging.outcome_complex_type.OutcomeComplexType outcome = 10;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated event_logging.data_complex_type.DataComplexType data = 11 [
    (validate.rules).repeated = {
      min_items: 0
    }
  ];
}
